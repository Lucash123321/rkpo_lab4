{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Maxim\\\\Dropbox\\\\\\u041A\\u043E\\u043D\\u0441\\u043F\\u0435\\u043A\\u0442\\u044B\\\\\\u0420\\u041A\\u041F\\u041E\\\\\\u041B\\u0430\\u0431\\u044B\\\\\\u041B\\u0430\\u0431\\u04304\\\\todo\\\\src\\\\pages\\\\DndPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport TodoItem from '../components/TodoItem';\nimport SwitchButton from '../components/SwitchButton';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DndPage() {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [task, setTask] = useState('');\n  const [filter, setFilter] = useState('all');\n  const handleAddTask = () => {\n    if (task.trim()) {\n      setTasks([...tasks, {\n        text: task,\n        status: 'incomplete'\n      }]);\n      setTask('');\n    }\n  };\n  const handleDragEnd = result => {\n    if (!result.destination) return;\n    const updatedTasks = [...tasks];\n    const [movedTask] = updatedTasks.splice(result.source.index, 1);\n    movedTask.status = result.destination.droppableId; // Update the task status based on the column\n    updatedTasks.splice(result.destination.index, 0, movedTask);\n    setTasks(updatedTasks);\n  };\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: handleDragEnd,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"To-Do List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SwitchButton, {\n        path: \"/\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-input\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: e => {\n            e.preventDefault();\n            handleAddTask();\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: task,\n            onChange: e => setTask(e.target.value),\n            placeholder: \"Add a new task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleAddTask,\n            children: \"Add\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"columns\",\n        children: /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: \"incomplete\",\n          children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n            ...provided.droppableProps,\n            ref: provided.innerRef,\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Incomplete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 17\n            }, this), filteredTasks.filter(task => task.status === 'incomplete').map((task, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n              draggableId: task.text,\n              index: index,\n              children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n                ref: provided.innerRef,\n                ...provided.draggableProps,\n                ...provided.dragHandleProps,\n                children: /*#__PURE__*/_jsxDEV(TodoItem, {\n                  task: task,\n                  index: index,\n                  tasks: tasks,\n                  setTasks: setTasks\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 73,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 23\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 19\n            }, this)), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n_s(DndPage, \"v3jcMHCqpcuItpiO97CqTDGRnoE=\");\n_c = DndPage;\nexport default DndPage;\nvar _c;\n$RefreshReg$(_c, \"DndPage\");","map":{"version":3,"names":["React","useState","TodoItem","SwitchButton","DragDropContext","Droppable","Draggable","jsxDEV","_jsxDEV","DndPage","_s","tasks","setTasks","task","setTask","filter","setFilter","handleAddTask","trim","text","status","handleDragEnd","result","destination","updatedTasks","movedTask","splice","source","index","droppableId","onDragEnd","children","className","fileName","_jsxFileName","lineNumber","columnNumber","path","onSubmit","e","preventDefault","type","value","onChange","target","placeholder","onClick","provided","droppableProps","ref","innerRef","filteredTasks","map","draggableId","draggableProps","dragHandleProps","_c","$RefreshReg$"],"sources":["C:/Users/Maxim/Dropbox/Конспекты/РКПО/Лабы/Лаба4/todo/src/pages/DndPage.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport TodoItem from '../components/TodoItem';\r\nimport SwitchButton from '../components/SwitchButton';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\nfunction DndPage() {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [task, setTask] = useState('');\r\n  const [filter, setFilter] = useState('all');\r\n\r\n  const handleAddTask = () => {\r\n    if (task.trim()) {\r\n      setTasks([...tasks, { text: task, status: 'incomplete' }]);\r\n      setTask('');\r\n    }\r\n  };\r\n  const handleDragEnd = (result) => {\r\n    if (!result.destination) return;\r\n\r\n    const updatedTasks = [...tasks];\r\n    const [movedTask] = updatedTasks.splice(result.source.index, 1);\r\n    movedTask.status = result.destination.droppableId; // Update the task status based on the column\r\n    updatedTasks.splice(result.destination.index, 0, movedTask);\r\n    setTasks(updatedTasks);\r\n  };\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={handleDragEnd}>\r\n      <div className=\"App\">\r\n        <h1>To-Do List</h1>\r\n        <SwitchButton path=\"/\" />\r\n        <div className=\"task-input\">\r\n          <form onSubmit={(e) => { e.preventDefault(); handleAddTask(); }}>\r\n            <input\r\n              type=\"text\"\r\n              value={task}\r\n              onChange={(e) => setTask(e.target.value)}\r\n              placeholder=\"Add a new task\"\r\n            />\r\n            <button onClick={handleAddTask}>Add</button>\r\n          </form>\r\n        </div>\r\n\r\n        <div className=\"columns\">\r\n            \r\n\r\n          {/* <Droppable droppableId=\"done\">\r\n            {(provided) => (\r\n              <div {...provided.droppableProps} ref={provided.innerRef}>\r\n                <h2>Done</h2>\r\n                {filteredTasks.filter(task => task.status === 'done').map((task, index) => (\r\n                  <Draggable key={index} draggableId={task.text} index={index}>\r\n                    {(provided) => (\r\n                      <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\r\n                        <TodoItem task={task} index={index} tasks={tasks} setTasks={setTasks} />\r\n                      </div>\r\n                    )}\r\n                  </Draggable>\r\n                ))}\r\n                {provided.placeholder}\r\n              </div>\r\n            )}\r\n          </Droppable> */}\r\n\r\n          <Droppable droppableId=\"incomplete\">\r\n            {(provided) => (\r\n              <div {...provided.droppableProps} ref={provided.innerRef}>\r\n                <h2>Incomplete</h2>\r\n                {filteredTasks.filter(task => task.status === 'incomplete').map((task, index) => (\r\n                  <Draggable key={index} draggableId={task.text} index={index}>\r\n                    {(provided) => (\r\n                      <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\r\n                        <TodoItem task={task} index={index} tasks={tasks} setTasks={setTasks} />\r\n                      </div>\r\n                    )}\r\n                  </Draggable>\r\n                ))}\r\n                {provided.placeholder}\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n\r\n          {/* <Droppable droppableId=\"blocked\">\r\n            {(provided) => (\r\n              <div {...provided.droppableProps} ref={provided.innerRef}>\r\n                <h2>Blocked</h2>\r\n                {filteredTasks.filter(task => task.status === 'blocked').map((task, index) => (\r\n                  <Draggable key={index} draggableId={task.text} index={index}>\r\n                    {(provided) => (\r\n                      <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\r\n                        <TodoItem task={task} index={index} tasks={tasks} setTasks={setTasks} />\r\n                      </div>\r\n                    )}\r\n                  </Draggable>\r\n                ))}\r\n                {provided.placeholder}\r\n              </div>\r\n            )}\r\n          </Droppable> */}\r\n        </div>\r\n      </div>\r\n    </DragDropContext>\r\n  );\r\n}\r\n\r\nexport default DndPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}