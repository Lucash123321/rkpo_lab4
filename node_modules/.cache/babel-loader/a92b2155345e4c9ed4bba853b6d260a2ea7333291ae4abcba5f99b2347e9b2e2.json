{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Maxim\\\\Dropbox\\\\\\u041A\\u043E\\u043D\\u0441\\u043F\\u0435\\u043A\\u0442\\u044B\\\\\\u0420\\u041A\\u041F\\u041E\\\\\\u041B\\u0430\\u0431\\u044B\\\\\\u041B\\u0430\\u0431\\u04304\\\\todo\\\\src\\\\pages\\\\DndPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport TodoItem from '../components/TodoItem';\nimport SwitchButton from '../components/SwitchButton';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DndPage() {\n  _s();\n  const [columns, setColumns] = useState({\n    todo: {\n      name: 'To Do',\n      items: [{\n        id: '1',\n        text: 'First task'\n      }, {\n        id: '2',\n        text: 'Second task'\n      }]\n    },\n    inProgress: {\n      name: 'In Progress',\n      items: []\n    }\n  });\n  const [task, setTask] = useState('');\n  const handleAddTask = () => {\n    if (!task) return;\n    const newTaskItem = {\n      id: Date.now(),\n      text: task\n    };\n    const newTodoItems = [...columns.todo.items, newTaskItem];\n    setColumns({\n      ...columns,\n      todo: {\n        ...columns.todo,\n        items: newTodoItems\n      }\n    });\n    setTask(\"\");\n  };\n  const onDragEnd = result => {\n    const {\n      source,\n      destination\n    } = result;\n    if (!destination) return;\n    const sourceColumn = columns[source.droppableId];\n    const destColumn = columns[destination.droppableId];\n    const sourceItems = [...sourceColumn.items];\n    const destItems = [...destColumn.items];\n    const [removed] = sourceItems.splice(source.index, 1);\n    if (source.droppableId === destination.droppableId) {\n      sourceItems.splice(destination.index, 0, removed);\n      setColumns({\n        ...columns,\n        [source.droppableId]: {\n          ...sourceColumn,\n          items: sourceItems\n        }\n      });\n    } else {\n      destItems.splice(destination.index, 0, removed);\n      setColumns({\n        ...columns,\n        [source.droppableId]: {\n          ...sourceColumn,\n          items: sourceItems\n        },\n        [destination.droppableId]: {\n          ...destColumn,\n          items: destItems\n        }\n      });\n    }\n  };\n  console.log(columns);\n  setTask(\"Бебра\");\n  console.log(columns);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 11\n  }, this);\n  // return (\n  //   <div className=\"App\">\n  //     <h1>To-Do List</h1>\n  //     <SwitchButton path=\"/\" />\n  //     <div className=\"task-input\">\n  //       <form onSubmit={(e) => { e.preventDefault(); handleAddTask(); }}>\n  //         <input\n  //           type=\"text\"\n  //           value={task}\n  //           onChange={(e) => setTask(e.target.value)}\n  //           placeholder=\"Add a new task\"\n  //         />\n  //         <button onClick={handleAddTask}>Add</button>\n  //       </form>\n  //     </div>\n\n  //     <div className=\"columns\">\n  //       <DragDropContext onDragEnd={onDragEnd}>\n  //         <div className=\"column\">\n  //           <h2>To Do</h2>\n  //           <Droppable droppableId=\"todo\">\n  //             {(provided) => (\n  //               <ul {...provided.droppableProps} ref={provided.innerRef}>\n  //                 {todoTasks.map((task, index) => (\n  //                   <Draggable key={task.text} draggableId={task.text} index={index}>\n  //                     {(provided) => (\n  //                       <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\n  //                         <TodoItem\n  //                           task={task}\n  //                           index={index}\n  //                           tasks={tasks}\n  //                           setTasks={setTasks}\n  //                         />\n  //                       </div>\n  //                     )}\n  //                   </Draggable>\n  //                 ))}\n  //                 {provided.placeholder}\n  //               </ul>\n  //             )}\n  //           </Droppable>\n  //         </div>\n\n  //         {/* Done Column */}\n  //         <div className=\"column\">\n  //           <h2>inProgress</h2>\n  //           <Droppable droppableId=\"inProgress\">\n  //             {(provided) => (\n  //               <ul {...provided.droppableProps} ref={provided.innerRef}>\n  //                 {doneTasks.map((task, index) => (\n  //                   <Draggable key={task.text} draggableId={task.text} index={index}>\n  //                     {(provided) => (\n  //                       <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\n  //                         <TodoItem\n  //                           task={task}\n  //                           index={index}\n  //                           tasks={tasks}\n  //                           setTasks={setTasks}\n  //                         />\n  //                       </div>\n  //                     )}\n  //                   </Draggable>\n  //                 ))}\n  //                 {provided.placeholder}\n  //               </ul>\n  //             )}\n  //           </Droppable>\n  //         </div>\n\n  //         {/* Blocked Column\n  //         <div className=\"column\">\n  //           <h2>Blocked</h2>\n  //           <Droppable droppableId=\"blocked\">\n  //             {(provided) => (\n  //               <ul {...provided.droppableProps} ref={provided.innerRef}>\n  //                 {blockedTasks.map((task, index) => (\n  //                   <Draggable key={task.text} draggableId={task.text} index={index}>\n  //                     {(provided) => (\n  //                       <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\n  //                         <TodoItem\n  //                           task={task}\n  //                           index={index}\n  //                           tasks={tasks}\n  //                           setTasks={setTasks}\n  //                         />\n  //                       </div>\n  //                     )}\n  //                   </Draggable>\n  //                 ))}\n  //                 {provided.placeholder}\n  //               </ul>\n  //             )}\n  //           </Droppable>\n  //         </div> */}\n  //       </DragDropContext>\n  //     </div>\n  //   </div>\n  // );\n}\n_s(DndPage, \"xRUiCTkC8LllmNnBijjFfuESZkU=\");\n_c = DndPage;\nexport default DndPage;\nvar _c;\n$RefreshReg$(_c, \"DndPage\");","map":{"version":3,"names":["React","useState","TodoItem","SwitchButton","DragDropContext","Droppable","Draggable","jsxDEV","_jsxDEV","DndPage","_s","columns","setColumns","todo","name","items","id","text","inProgress","task","setTask","handleAddTask","newTaskItem","Date","now","newTodoItems","onDragEnd","result","source","destination","sourceColumn","droppableId","destColumn","sourceItems","destItems","removed","splice","index","console","log","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Maxim/Dropbox/Конспекты/РКПО/Лабы/Лаба4/todo/src/pages/DndPage.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport TodoItem from '../components/TodoItem';\r\nimport SwitchButton from '../components/SwitchButton';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\nfunction DndPage() {\r\n  const [columns, setColumns] = useState({\r\n    todo: {\r\n      name: 'To Do',\r\n      items: [\r\n      { id: '1', text: 'First task' },\r\n      { id: '2', text: 'Second task' },\r\n      ],\r\n    },\r\n    inProgress: {\r\n      name: 'In Progress',\r\n      items: [],\r\n      },\r\n    });\r\n\r\n  const [task, setTask] = useState('');\r\n\r\n  const handleAddTask = () => {\r\n    if (!task) return; \r\n\r\n    const newTaskItem = {\r\n      id: Date.now(),\r\n      text: task,\r\n      };\r\n\r\n    const newTodoItems = [...columns.todo.items, newTaskItem]\r\n\r\n    setColumns({\r\n      ...columns,\r\n      todo: {\r\n        ...columns.todo,\r\n        items: newTodoItems\r\n      }\r\n\r\n    });\r\n\r\n    setTask(\"\")\r\n  };\r\n\r\n  const onDragEnd = (result) => {\r\n    const { source, destination } = result;\r\n    if (!destination) return;\r\n    const sourceColumn = columns[source.droppableId];\r\n    const destColumn = columns[destination.droppableId];\r\n    const sourceItems = [...sourceColumn.items];\r\n    const destItems = [...destColumn.items];\r\n    const [removed] = sourceItems.splice(source.index, 1);\r\n\r\n    if (source.droppableId === destination.droppableId) {\r\n      sourceItems.splice(destination.index, 0, removed);\r\n      setColumns({\r\n        ...columns,\r\n        [source.droppableId]: {\r\n          ...sourceColumn,\r\n          items: sourceItems,\r\n        },\r\n      });\r\n\r\n    } else {\r\n      destItems.splice(destination.index, 0, removed);\r\n      setColumns({\r\n        ...columns,\r\n        [source.droppableId]: {\r\n          ...sourceColumn,\r\n          items: sourceItems,\r\n        },\r\n        [destination.droppableId]: {\r\n          ...destColumn,\r\n          items: destItems,\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  console.log(columns);\r\n  setTask(\"Бебра\");\r\n  console.log(columns);\r\n\r\n  return (<div>\r\n    <button onClick={handleAddTask}></button>\r\n    </div>\r\n    )\r\n  // return (\r\n  //   <div className=\"App\">\r\n  //     <h1>To-Do List</h1>\r\n  //     <SwitchButton path=\"/\" />\r\n  //     <div className=\"task-input\">\r\n  //       <form onSubmit={(e) => { e.preventDefault(); handleAddTask(); }}>\r\n  //         <input\r\n  //           type=\"text\"\r\n  //           value={task}\r\n  //           onChange={(e) => setTask(e.target.value)}\r\n  //           placeholder=\"Add a new task\"\r\n  //         />\r\n  //         <button onClick={handleAddTask}>Add</button>\r\n  //       </form>\r\n  //     </div>\r\n\r\n  //     <div className=\"columns\">\r\n  //       <DragDropContext onDragEnd={onDragEnd}>\r\n  //         <div className=\"column\">\r\n  //           <h2>To Do</h2>\r\n  //           <Droppable droppableId=\"todo\">\r\n  //             {(provided) => (\r\n  //               <ul {...provided.droppableProps} ref={provided.innerRef}>\r\n  //                 {todoTasks.map((task, index) => (\r\n  //                   <Draggable key={task.text} draggableId={task.text} index={index}>\r\n  //                     {(provided) => (\r\n  //                       <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\r\n  //                         <TodoItem\r\n  //                           task={task}\r\n  //                           index={index}\r\n  //                           tasks={tasks}\r\n  //                           setTasks={setTasks}\r\n  //                         />\r\n  //                       </div>\r\n  //                     )}\r\n  //                   </Draggable>\r\n  //                 ))}\r\n  //                 {provided.placeholder}\r\n  //               </ul>\r\n  //             )}\r\n  //           </Droppable>\r\n  //         </div>\r\n\r\n  //         {/* Done Column */}\r\n  //         <div className=\"column\">\r\n  //           <h2>inProgress</h2>\r\n  //           <Droppable droppableId=\"inProgress\">\r\n  //             {(provided) => (\r\n  //               <ul {...provided.droppableProps} ref={provided.innerRef}>\r\n  //                 {doneTasks.map((task, index) => (\r\n  //                   <Draggable key={task.text} draggableId={task.text} index={index}>\r\n  //                     {(provided) => (\r\n  //                       <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\r\n  //                         <TodoItem\r\n  //                           task={task}\r\n  //                           index={index}\r\n  //                           tasks={tasks}\r\n  //                           setTasks={setTasks}\r\n  //                         />\r\n  //                       </div>\r\n  //                     )}\r\n  //                   </Draggable>\r\n  //                 ))}\r\n  //                 {provided.placeholder}\r\n  //               </ul>\r\n  //             )}\r\n  //           </Droppable>\r\n  //         </div>\r\n\r\n  //         {/* Blocked Column\r\n  //         <div className=\"column\">\r\n  //           <h2>Blocked</h2>\r\n  //           <Droppable droppableId=\"blocked\">\r\n  //             {(provided) => (\r\n  //               <ul {...provided.droppableProps} ref={provided.innerRef}>\r\n  //                 {blockedTasks.map((task, index) => (\r\n  //                   <Draggable key={task.text} draggableId={task.text} index={index}>\r\n  //                     {(provided) => (\r\n  //                       <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\r\n  //                         <TodoItem\r\n  //                           task={task}\r\n  //                           index={index}\r\n  //                           tasks={tasks}\r\n  //                           setTasks={setTasks}\r\n  //                         />\r\n  //                       </div>\r\n  //                     )}\r\n  //                   </Draggable>\r\n  //                 ))}\r\n  //                 {provided.placeholder}\r\n  //               </ul>\r\n  //             )}\r\n  //           </Droppable>\r\n  //         </div> */}\r\n  //       </DragDropContext>\r\n  //     </div>\r\n  //   </div>\r\n  // );\r\n}\r\n\r\nexport default DndPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}